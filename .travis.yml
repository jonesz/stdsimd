language: rust
sudo: false
rust: nightly

matrix:
  fast_finish: true
  include:
    - env: TARGET=arm-unknown-linux-gnueabihf
    - env: TARGET=arm-linux-androideabi
    - env: TARGET=armv7-unknown-linux-gnueabihf
    - env: TARGET=aarch64-unknown-linux-gnu
    - env: TARGET=aarch64-linux-android
    - env: TARGET=thumbv6m-none-eabi NOSTD=1
    - env: TARGET=thumbv7m-none-eabi NOSTD=1
    - env: TARGET=thumbv7em-none-eabi NOSTD=1
    - env: TARGET=thumbv7em-none-eabihf NOSTD=1
    - env: DOCUMENTATION
      install: true
      script: ci/dox.sh
    - env: VERIFY_X86
      script: cargo test --manifest-path crates/stdsimd-verify/Cargo.toml
      install: true
    - env: RUSTFMT=On TARGET=x86_64-unknown-linux-gnu NO_ADD=1
      before_script:
      - rustup component add rustfmt-preview
      script:
      - cargo fmt --all -- --check
    - env: CLIPPY=On TARGET=x86_64-unknown-linux-gnu NO_ADD=1
      script: |
        cargo install clippy
        cargo clippy --all -- -D clippy-pedantic
  allow_failures:
    - env: CLIPPY=On TARGET=x86_64-unknown-linux-gnu NO_ADD=1
    - env: RUSTFMT=On TARGET=x86_64-unknown-linux-gnu NO_ADD=1

before_install:
  # FIXME (travis-ci/travis-ci#8920) shouldn't be necessary...
  - python -c "import fcntl; fcntl.fcntl(1, fcntl.F_SETFL, 0)"

install:
  - if [ "$NO_ADD" == "" ]; then rustup target add $TARGET; fi

script:
  - cargo generate-lockfile
  - |
    if [ "$NORUN" == "1" ]; then
      cargo build --target=$TARGET -p coresimd -p stdsimd --manifest-path crates/stdsimd/Cargo.toml
      cargo build --release --target=$TARGET -p coresimd -p stdsimd --manifest-path crates/stdsimd/Cargo.toml
    elif [ "$NOSTD" == "1" ]; then
      cargo build --target=$TARGET -p coresimd --manifest-path crates/stdsimd/Cargo.toml
    else
      ci/run-docker.sh $TARGET $FEATURES
    fi

notifications:
  email:
    on_success: never
